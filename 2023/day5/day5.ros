#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str) :silent t))

(defpackage :ros.script.day5.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines)
  (:import-from :str :split :words :blankp))
(in-package :ros.script.day5.3910652739)

(defvar *lines*)

(defun range-until-next-blank (i)
  (let ((pos (position-if #'blankp *lines* :start i)))
    (values
      (or pos (length *lines*))
      (map 'list (lambda (line) (mapcar #'parse-integer (words line))) (subseq *lines* i pos)))))

(defmacro update-var (varname)
  `(multiple-value-bind (new-i result) (range-until-next-blank (1+ i)) 
     (setq i new-i ,varname result)))

(defun get-mapping (sourceval mapvar)
  (loop for (dest-start source-start length) in mapvar
   if (<= source-start sourceval (+ source-start length -1)) return (+ dest-start (- sourceval source-start))
   finally (return sourceval)))

(defun push-range-if-len-non-zero (ranges start len)
  (when (plusp len)
    (push (list start len) ranges)))

(defun get-mappings (source-ranges mapvar)
  (loop while source-ranges
   for (this-start this-length) = (pop source-ranges)
   for this-end = (+ this-start this-length -1)
   nconc
     (or 
       (loop for (dest-start source-start length) in mapvar
        for source-end = (+ source-start length -1)

        ; if range to process falls entirely within the mapping range, easiest case, transform entire range
        if (<= source-start this-start this-end source-end) collect (list (+ dest-start (- this-start source-start)) this-length)
        
        ; if mapping range falls entirely within the range to process, need to transform the middle part
        ; and split off the left and right sides for further processing
        else if (<= this-start source-start source-end this-end) collect (list dest-start length)
        and do (push-range-if-len-non-zero source-ranges this-start (- source-start this-start))
        and do (push-range-if-len-non-zero source-ranges (1+ source-end) (- this-end source-end))

        ; if mapping range starts before the range to process, and ends before range to process ends,
        ; need to transform the left side and split off the right side for further processing
        else if (<= source-start this-start source-end) collect (list (+ dest-start (- this-start source-start)) (- source-end this-start))
        and do (push-range-if-len-non-zero source-ranges (1+ source-end) (- this-length (- source-end this-start)))

        ; if mapping range starts after the range to process, and ends after the range to process ends,
        ; need to transform the right side and split off the left side for further processing
        else if (<= source-start this-end source-end) collect (list dest-start (- this-length (- source-start this-start)))
        and do (push-range-if-len-non-zero source-ranges this-start (- source-start this-start)))

       ; if loop collected nothing, don't transform the source range
       (list (list this-start this-length)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setq *lines* (coerce (read-file-lines "input.txt") 'vector))
  (let ((seeds) (seed-to-soil) (soil-to-fertilizer) (fertilizer-to-water)
        (water-to-light) (light-to-temperature) (temperature-to-humidity) (humidity-to-location))
    (loop for i from 0 below (length *lines*)
     for line = (elt *lines* i)
     if (search "seeds:" line) do (setq seeds (mapcar #'parse-integer (words (second (split ": " line)))))
     else if (search "seed-to-soil" line) do (update-var seed-to-soil)
     else if (search "soil-to-fertilizer" line) do (update-var soil-to-fertilizer)
     else if (search "fertilizer-to-water" line) do (update-var fertilizer-to-water)
     else if (search "water-to-light" line) do (update-var water-to-light)
     else if (search "light-to-temperature" line) do (update-var light-to-temperature)
     else if (search "temperature-to-humidity" line) do (update-var temperature-to-humidity)
     else if (search "humidity-to-location" line) do (update-var humidity-to-location))
    (format t "Part 1: ~a~%Part 2: ~a~%"
      (loop for seed in seeds
       for soil = (get-mapping seed seed-to-soil)
       for fertilizer = (get-mapping soil soil-to-fertilizer)
       for water = (get-mapping fertilizer fertilizer-to-water)
       for light = (get-mapping water water-to-light)
       for temperature = (get-mapping light light-to-temperature)
       for humidity = (get-mapping temperature temperature-to-humidity)
       for location = (get-mapping humidity humidity-to-location)
       minimize location)
      (let* ((soils (get-mappings (loop for range-pair on seeds by #'cddr collect (subseq range-pair 0 2)) seed-to-soil))
             (fertilizers (get-mappings soils soil-to-fertilizer))
             (waters (get-mappings fertilizers fertilizer-to-water))
             (lights (get-mappings waters water-to-light))
             (temperatures (get-mappings lights light-to-temperature))
             (humidities (get-mappings temperatures temperature-to-humidity))
             (locations (get-mappings humidities humidity-to-location)))
        (loop for (location) in locations minimize location)))))
    
