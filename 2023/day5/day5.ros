#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str alexandria) :silent t))

(defpackage :ros.script.day5.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines :println)
  (:import-from :alexandria :curry)
  (:import-from :str :split :words :blankp))
(in-package :ros.script.day5.3910652739)

(defconstant +lines+ (coerce (read-file-lines "input.txt") 'vector))

(defun range-until-next-blank (i)
  (let ((pos (position-if #'blankp +lines+ :start i)))
    (values
      (or pos (length +lines+))
      (map 'list (lambda (line) (mapcar #'parse-integer (words line))) (subseq +lines+ i pos)))))

(defmacro update-var (varname)
  `(multiple-value-bind (new-i result) (range-until-next-blank (1+ i)) 
     (setf i new-i ,varname result)))

(defun get-mapping (sourceval mapvar)
  (loop for (dest-start source-start length) in mapvar
   if (<= source-start sourceval (+ source-start length)) return (+ dest-start (- sourceval source-start))
   finally (return sourceval)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((seeds) (seed-to-soil) (soil-to-fertilizer) (fertilizer-to-water) (water-to-light) (light-to-temperature) (temperature-to-humidity) (humidity-to-location))
    (loop for i from 0 below (length +lines+)
     for line = (elt +lines+ i)
     if (search "seeds:" line) do (setf seeds (mapcar #'parse-integer (words (second (split ": " line)))))
     else if (search "seed-to-soil" line) do (update-var seed-to-soil)
     else if (search "soil-to-fertilizer" line) do (update-var soil-to-fertilizer)
     else if (search "fertilizer-to-water" line) do (update-var fertilizer-to-water)
     else if (search "water-to-light" line) do (update-var water-to-light)
     else if (search "light-to-temperature" line) do (update-var light-to-temperature)
     else if (search "temperature-to-humidity" line) do (update-var temperature-to-humidity)
     else if (search "humidity-to-location" line) do (update-var humidity-to-location))
    (format t "Part 1: ~a~%Part 2: ~a~%"
      (loop for seed in seeds
       for soil = (get-mapping seed seed-to-soil)
       for fertilizer = (get-mapping soil soil-to-fertilizer)
       for water = (get-mapping fertilizer fertilizer-to-water)
       for light = (get-mapping water water-to-light)
       for temperature = (get-mapping light light-to-temperature)
       for humidity = (get-mapping temperature temperature-to-humidity)
       for location = (get-mapping humidity humidity-to-location)
       minimize location)
       nil
    ;   (loop for (seed-range-start seed-range-length) on seeds by #'cddr
    ;    do (println (list seed-range-start seed-range-length))
    ;    minimize (loop for seed from seed-range-start by 1 repeat seed-range-length
    ;              for soil = (get-mapping seed seed-to-soil)
    ;              for fertilizer = (get-mapping soil soil-to-fertilizer)
    ;              for water = (get-mapping fertilizer fertilizer-to-water)
    ;              for light = (get-mapping water water-to-light)
    ;              for temperature = (get-mapping light light-to-temperature)
    ;              for humidity = (get-mapping temperature temperature-to-humidity)
    ;              for location = (get-mapping humidity humidity-to-location)
    ;              minimize location))
                 )))
    