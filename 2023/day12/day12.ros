#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str alexandria) :silent t))

(defpackage :ros.script.day12.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines :println :first-char)
  (:import-from :alexandria :eswitch)
  (:import-from :str :words :concat :split :join :s-rest))
(in-package :ros.script.day12.3910652739)

(defun parse-line (line)
  (destructuring-bind (conditions groups) (words line)
    (list conditions (mapcar #'parse-integer (split #\, groups)))))

(defvar *cache* (make-hash-table :test #'equal))

(defun recur (string groups &optional (curr-group 0))
  (let ((key (concat string (write-to-string groups) (write-to-string curr-group))))
    (or (gethash key *cache*)
      (setf (gethash key *cache*)
        (if (zerop (length string)) 
          (if (or (and (null groups) (zerop curr-group)) (equal groups (list curr-group))) 1 0)
          (let ((desired-group-size (or (car groups) 0))
                (remaining-chars (s-rest string)))
            (eswitch ((first-char string) :test #'char=)
              (#\. (if (plusp curr-group) 
                     (if (< curr-group desired-group-size) 
                       0
                       (recur remaining-chars (cdr groups) 0))
                     (recur remaining-chars groups 0)))
              (#\# (if (= curr-group desired-group-size) 0
                     (recur remaining-chars groups (1+ curr-group))))
              (#\? (cond
                     ((= curr-group desired-group-size) (recur remaining-chars (cdr groups) 0))
                     ((zerop curr-group)
                       (+ 
                         (recur remaining-chars groups 0)
                         (recur remaining-chars groups 1)))
                     (t (recur remaining-chars groups (1+ curr-group))))))))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((lines (read-file-lines "input.txt")))
    (format t "Part 1: ~a~%Part 2: ~a~%"
      (loop for line in lines
       for (conditions groups) = (parse-line line)
       sum (recur conditions groups))
      (loop for line in lines
       for (conditions groups) = (parse-line line)
       sum (recur (join #\? (loop repeat 5 collect conditions)) (loop repeat 5 nconc (copy-seq groups)))))))
