#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str alexandria) :silent t))

(defpackage :ros.script.day12.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines :println)
  (:import-from :str :words :split :replace-first)
  (:import-from :alexandria :hash-table-keys))
(in-package :ros.script.day12.3910652739)

(defun parse-line (line)
  (destructuring-bind (conditions groups) (words line)
    (let* ((groups (mapcar #'parse-integer (split #\, groups)))
           (total (reduce #'+ groups))
           (unassigned (- total (count #\# conditions))))
      (list conditions groups unassigned))))

(defun parse-groups (cond-str)
  (loop with size = 0
   with result = (list)
   for c across cond-str
   when (char= c #\#) do (incf size)
   else when (plusp size) do (push size result) and do (setq size 0)
   finally (progn (when (plusp size) (push size result)) (return (nreverse result)))))

(defun verify-groups-valid (actual expected)
  (loop named outer for a in actual
   do (loop
       when (null expected) do (return-from outer nil)
       while (> a (car expected)) do (pop expected)
       finally (pop expected)))
   t)

(defun recur (string groups remaining)
  (let ((unknowns (count #\? string)))
    (if (< unknowns remaining) 0 
      (if (plusp unknowns)
        (if (verify-groups-valid (parse-groups string) groups)
          (+ 
            (if (plusp remaining) (recur (replace-first "?" "#" string) groups (1- remaining)) 0)
            (recur (replace-first "?" "." string) groups remaining))
          0)
        (if (and (zerop remaining) (equal (parse-groups string) groups)) 1 0)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "Part 1: ~a~%Part 2: ~a~%"
    (loop for line in (read-file-lines "input.txt") 
     for (conditions groups unassigned) = (parse-line line)
     sum (recur conditions groups unassigned))
     nil))
