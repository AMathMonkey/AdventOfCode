#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str alexandria) :silent t))

(defpackage :ros.script.day12.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines :println)
  (:import-from :str :words :split)
  (:import-from :alexandria :hash-table-keys))
(in-package :ros.script.day12.3910652739)


(defun parse-conditions (conditions)
  (loop with min = 0
   with max = 0
   with zeroes = 0
   with ones = 0
   for c across conditions
   for i from (1- (length conditions)) downto 0
   if (char= #\# c) do (setf (ldb (byte 1 i) max) 1 (ldb (byte 1 i) min) 1 (ldb (byte 1 i) ones) 1)
   else if (char= #\. c) do (setf (ldb (byte 1 i) zeroes) 1)
   else if (char= #\? c) do (setf (ldb (byte 1 i) max) 1)
   finally (return (list min max zeroes ones))))

(defun verify-groups (i groups)
  (loop with expected-group-size = (pop groups)
   with curr-group-size = 0
   for bitnum from (1- (integer-length i)) downto 0
   never (and expected-group-size (> curr-group-size expected-group-size))
   if (logbitp bitnum i) do (incf curr-group-size)
   else if (plusp curr-group-size)
     if (/= expected-group-size curr-group-size) return nil end
   and do (setf curr-group-size 0)
   and do (setf expected-group-size (pop groups))
   finally (return (and (= (or expected-group-size curr-group-size) curr-group-size) (not groups)))))

(defun parse-line (line)
  (destructuring-bind (conditions groups) (words line)
    (let ((groups (mapcar #'parse-integer (split #\, groups))))
      (list
        (parse-conditions conditions)
        (list groups (apply #'+ groups))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "Part 1: ~a~%Part 2: ~a~%"
    (loop for line in (read-file-lines "input.txt") 
     for ((min max zeroes ones) (groups bits)) = (parse-line line)
     sum (loop for i from min to max
          count (and (= bits (logcount i)) (zerop (logandc2 ones i)) (not (logtest zeroes i)) (verify-groups i groups))))
     nil))
