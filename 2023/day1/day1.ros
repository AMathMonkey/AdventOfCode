#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t))

(defpackage :ros.script.day1.3910536952
  (:use :cl)
  (:import-from :uiop :read-file-lines))
(in-package :ros.script.day1.3910536952)

(defconstant +lines+ (read-file-lines "input.txt"))

(defconstant +numstrs-and-values+
  #(("1" . 1) ("2" . 2) ("3" . 3) ("4" . 4) ("5" . 5) ("6" . 6) ("7" . 7) ("8" . 8) ("9" . 9)
    ("one" . 1) ("two" . 2) ("three" . 3) ("four" . 4) ("five" . 5) ("six" . 6) ("seven" . 7) ("eight" . 8) ("nine" . 9)))

(defun min-or-max-index (min-or-max seq)
  (loop with v = nil
   with v-index = nil
   with comparison-func = (case min-or-max (:min #'<) (:max #'>))
   for i from 0 below (length seq)
   for item = (elt seq i)
   if item
   if (or (not v) (funcall comparison-func item v)) do (setf v item v-index i)
   finally (return v-index)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "Part 1: ~a~%Part 2: ~a~%"
    (loop for line in +lines+
     for digit-chars = (list (find-if #'digit-char-p line) (find-if #'digit-char-p line :from-end t))
     sum (parse-integer (coerce digit-chars 'string)))
    (loop with number-strings = (map 'list #'car +numstrs-and-values+) 
     for line in +lines+ 
     for min-index = (min-or-max-index :min (map 'vector (lambda (s) (search s line :test #'equal)) number-strings))
     for max-index = (min-or-max-index :max (map 'vector (lambda (s) (search s line :test #'equal :from-end t)) number-strings))
     sum (+ (* 10 (cdr (elt +numstrs-and-values+ min-index))) (cdr (elt +numstrs-and-values+ max-index))))))
