#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str alexandria) :silent t))

(defpackage :ros.script.day2.3910554417
  (:use :cl)
  (:import-from :uiop :read-file-lines)
  (:import-from :alexandria :eswitch)
  (:import-from :str :split :words))
(in-package :ros.script.day2.3910554417)

(defconstant +lines+ (read-file-lines "input.txt"))

(defun get-limit (colour)
  (eswitch (colour :test #'string=)
    ("red" 12)
    ("green" 13)
    ("blue" 14)))

;; Example output: ((2 "red") (2 "green") (6 "red") (3 "green") (2 "red") (1 "green") (2 "blue") (1 "red"))
(defun game-str-to-turn-pairs (game-str)
  "Return a list of pairs of number int and colour string, which occurred in the provided game string"
  (loop for turn-str in (split "; " game-str)
   nconc (loop for pair-str in (split ", " turn-str)
            for (number-str colour) = (words pair-str)
            collect (list (parse-integer number-str) colour))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "Part 1: ~a~%Part 2: ~a~%"
    (loop for line in +lines+
     for (game-id-str rest) = (split ": " line)
     if (loop for (number colour) in (game-str-to-turn-pairs rest) always (<= number (get-limit colour)))
     sum (parse-integer (second (words game-id-str))))
    (loop for line in +lines+
     for (game-id-str rest) = (split ": " line)
     sum (apply #'*
           (loop for (number colour) in (game-str-to-turn-pairs rest)
            if (string= colour "red") maximize number into max-red
            else if (string= colour "green") maximize number into max-green
            else maximize number into max-blue
            finally (return (list max-red max-green max-blue)))))))
    