#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(cl-ppcre) :silent t)  )

(defpackage :ros.script.day2.3910554417
  (:use :cl)
  (:import-from :uiop :read-file-lines)
  (:import-from :ppcre :split :scan-to-strings :create-scanner))
(in-package :ros.script.day2.3910554417)

(defconstant +red-limit+ 12)
(defconstant +green-limit+ 13)
(defconstant +blue-limit+ 14)

(defconstant +lines+ (read-file-lines "input.txt"))
(defconstant +game-scanner+ (create-scanner "^Game (\\d+):(.*)"))
(defconstant +red-scanner+ (create-scanner "(\\d+) red"))
(defconstant +green-scanner+ (create-scanner "(\\d+) green"))
(defconstant +blue-scanner+ (create-scanner "(\\d+) blue"))
(defconstant +semicolon-scanner+ (create-scanner ";"))

(defmacro get-first-match-group (scan-call)
  `(or (ignore-errors (parse-integer (elt (nth-value 1 ,scan-call) 0))) 0))

(defmacro scan-turn-func (scanner)
  `(lambda (turn) (get-first-match-group (scan-to-strings ,scanner turn))))

(defun every-less-than-num (seq limit)
  (every (lambda (num) (<= num limit)) seq))

(defun main (&rest argv)
  (declare (ignorable argv))
  (format t "Part 1: ~a~%Part 2: ~a~%"
    (loop for line in +lines+
     for (game-s rest) = (coerce (nth-value 1 (scan-to-strings +game-scanner+ line)) 'list)
     for game = (parse-integer game-s)
     for turns = (split +semicolon-scanner+ rest)
     if (and
          (every-less-than-num (map 'list (scan-turn-func +red-scanner+) turns) +red-limit+)
          (every-less-than-num (map 'list (scan-turn-func +green-scanner+) turns) +green-limit+)
          (every-less-than-num (map 'list (scan-turn-func +blue-scanner+) turns) +blue-limit+))
     sum game)
    (loop for line in +lines+
     for (game-s rest) = (coerce (nth-value 1 (scan-to-strings +game-scanner+ line)) 'list)
     for game = (parse-integer game-s)
     for turns = (split +semicolon-scanner+ rest)
     sum (* 
           (reduce #'max turns :key (scan-turn-func +red-scanner+))
           (reduce #'max turns :key (scan-turn-func +green-scanner+))
           (reduce #'max turns :key (scan-turn-func +blue-scanner+))))))
    