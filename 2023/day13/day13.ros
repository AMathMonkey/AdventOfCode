#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(str) :silent t))

(defpackage :ros.script.day13.3910652739
  (:use :cl)
  (:import-from :uiop :read-file-lines :emptyp :println)
  (:import-from :str :words :concat :split :join :s-rest))
(in-package :ros.script.day13.3910652739)
 
(defun next-grid (lines)
  (loop with rest = (copy-seq lines)
   for line in lines
   for i from 0
   until (equal line "")
   collect line into grid
   finally (return (list (coerce grid 'vector) (and lines (subseq lines (1+ i)))))))
 
(defun transpose-grid (grid)
  (coerce 
    (loop with rows = (length grid)
     with cols = (length (elt grid 0))
     for col from 0 below cols
     for s-list = (loop for row across grid collect (char row col))
     collect (coerce s-list 'string))
    'vector))
 
(defun find-symmetry (grid)
  (let ((len (length grid)))
     (flet ((expand-from (row)
              (loop for top from row downto 0
               for bottom from (1+ row) below len
               always (equal (elt grid top) (elt grid bottom)))))
       (loop for i from 0 below (1- len)
        when (expand-from i) return (1+ i)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((lines (read-file-lines "input.txt")))
    (format t "Part 1: ~a~%Part 2: ~a~%"
      (loop with rest = lines 
       for (g rest1) = (next-grid rest)
       until (emptyp g)
       do (setq rest rest1)
       when (find-symmetry g) sum it into horizontal
       else when (find-symmetry (transpose-grid g)) sum it into vertical
       finally (return (+ vertical (* 100 horizontal))))
      nil)))
