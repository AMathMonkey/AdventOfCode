procedure main()
    local input, lines := [], pairs := [], sum1 := 0, sum2 := 0, left, right, arr, num, line, badIndices
    input := open("input.txt")
    while line := read(input) do {
        if find("|", line) then line ? {
            left := tab(many(&digits))
            tab(upto(&digits))
            right := tab(many(&digits))
            put(pairs, [left, right])
        }
        else {
            arr := []
            line ? repeat {
                if num := tab(many(&digits)) then put(arr, num) else break
                tab(upto(&digits))
            }
            if *arr > 0 then put(lines, arr)
        }
    }
    every line := !lines do {
        if not (badIndices := findBadIndices(line, pairs)) then sum1 +:= line[(*line + 1) / 2]
        else {
            repeat {
                line[badIndices[1]] :=: line[badIndices[2]]
                if not (badIndices := findBadIndices(line, pairs)) then break
            }
            sum2 +:= line[(*line + 1) / 2]
        } 
    } 
    write("Part 1: ", sum1, "\nPart 2: ", sum2)
end

procedure findBadIndices(line, pairs)
    local mappings := table(), i, pair
    every i := 1 to *line do mappings[line[i]] := i
    every pair := !pairs do {
        if \mappings[pair[1]] >= \mappings[pair[2]] then return [mappings[pair[1]], mappings[pair[2]]]
    }
    fail
end