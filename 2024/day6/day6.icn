link io

procedure main()
    local lines := filetext("input.txt"), i, j, visited, dir, coords, sum2 := 0
    coords := findStart(lines)
    visited := simulate(lines, coords)
    every vCoord := !visited do {
        vCoord ? {
            i := tab(many(&digits))
            tab(upto(&digits))
            j := tab(many(&digits))
        }
        if i = coords[1] & j = coords[2] then next
        every lines[i, j] <- "#" do /simulate(lines, coords) & sum2 +:= 1
    }
    write("Part 1: ", *visited, "\nPart 2: ", sum2)
end

procedure simulate(grid, coords)
    visited := set()
    cycles := set()
    i := coords[1]
    j := coords[2]
    dir := "up"
    repeat {
        cycleKey := i || " " || j || " " || dir
        if member(cycles, cycleKey) then return
        if i <= 0 | i > *grid | j <= 0 | j > *grid[i] then return visited
        insert(cycles, cycleKey)
        insert(visited, i || " " || j)
        coords := advance(i, j, dir)
        while grid[coords[1], coords[2]] == "#" do {
            dir := rotateDir(dir)
            coords := advance(i, j, dir)
        }
        i := coords[1]
        j := coords[2]
    }
end

procedure findStart(grid)
    local i, j
    every i := !*grid do
        every j := !*grid[i] do 
            if grid[i, j] == "^" then return [i, j]
end

procedure advance(i, j, dir)
    return case dir of {
        "up": [i - 1, j]
        "down": [i + 1, j]
        "left": [i, j - 1]
        "right": [i, j + 1]
    }
end

procedure rotateDir(dir)
    return case dir of {
        "up": "right"
        "down": "left"
        "left": "up"
        "right": "down"
    }
end
