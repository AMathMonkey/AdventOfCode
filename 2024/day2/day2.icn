procedure main()
    local input, ints, safe1 := 0, safe2 := 0, c, diffs
    input := open("input.txt")
    while line := read(input) do {
        ints := toInts(line)
        diffs := getDiffs(ints)
        if validPos(diffs) | validNeg(diffs) then safe1 +:= 1
        every i := 1 to *ints do {
            c := copy(ints)
            delete(c, i)
            diffs := getDiffs(c)
            if validPos(diffs) | validNeg(diffs) then { safe2 +:= 1; break }
        }
    }
    write("Part 1: ", safe1, "\nPart 2: ", safe2)
end

procedure toInts(line)
    local res := []
    line ? repeat {
        put(res, integer(tab(many(&digits)))) | return res
        tab(upto(&digits))
    }
end

procedure getDiffs(ints)
    return [: (i := 1 to *ints - 1, ints[i + 1] - ints[i]) :]
end

procedure validPos(ints)
    every i := !ints do if not (1 <= i <= 3) then fail
    return
end

procedure validNeg(ints)
    every i := !ints do if not (-3 <= i <= -1) then fail
    return
end
