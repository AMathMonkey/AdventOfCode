procedure main()
    local input, ints, safe1 := 0, safe2 := 0, c, diffs
    input := open("input.txt")
    while line := read(input) do {
        ints := [: toInts(line) :]
        diffs := [: getDiffs(ints) :] 
        if validPos(diffs) | validNeg(diffs) then safe1 +:= 1
        every i := !*ints do {
            c := copy(ints)
            delete(c, i)
            diffs := [: getDiffs(c) :] 
            if validPos(diffs) | validNeg(diffs) then { safe2 +:= 1; break }
        }
    }
    write("Part 1: ", safe1, "\nPart 2: ", safe2)
end

procedure toInts(line)
    local i
    line ? repeat {
        if i := tab(many(&digits)) then suspend i else fail
        tab(upto(&digits))
    }
end

procedure getDiffs(ints)
    local i
    suspend (i := !(*ints - 1), ints[i + 1] - ints[i])
end

procedure validPos(ints)
    local i
    return not (i := !ints, not (1 <= i <= 3))
end

procedure validNeg(ints)
    local i
    return not (i := !ints, not (-3 <= i <= -1))
end
