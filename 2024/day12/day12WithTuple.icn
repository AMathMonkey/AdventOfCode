# Version that uses a set of tuples of [i, j] instead of concatenating 
# i || " " || j to make strings that can be put into a set.
# This takes about 650 milliseconds to run, so tuples are 3x slower than building strings myself.
# My main solution runs in 190 milliseconds.

link tuple
link io

procedure main()
    local lines := filetext("input.txt"), sum1 := 0, sum2 := 0, seen := set(), i, j, c, shape
    every i := !*lines do every j := !*lines[i] do {
        member(seen, tuple([i, j])) & next
        c := lines[i, j]
        shape := set()
        expand(lines, shape, seen, i, j, c)
        sum1 +:= getPerimeter(shape) * *shape
        sum2 +:= countCorners(shape) * *shape
    }
    write("Part 1: ", sum1, "\nPart 2: ", sum2)
end

procedure expand(grid, shape, seen, i, j, c)
    local p := tuple([i, j])
    if not (grid[i, j] == c) | member(seen, p) then fail
    insert(seen, p)
    insert(shape, p)
    expand(grid, shape, seen, i + 1, j, c)
    expand(grid, shape, seen, i - 1, j, c)
    expand(grid, shape, seen, i, j + 1, c)
    expand(grid, shape, seen, i, j - 1, c)
end

procedure getPerimeter(shape)
    local result := 0, point
    every point := !shape do {
        i := point[1]
        j := point[2]
        if not member(shape, tuple([i + 1, j])) then result +:= 1
        if not member(shape, tuple([i - 1, j])) then result +:= 1
        if not member(shape, tuple([i, j + 1])) then result +:= 1
        if not member(shape, tuple([i, j - 1])) then result +:= 1
    }
    return result
end

procedure countCorners(shape)
    local result := 0, point, i, j, topRight, right, bottomRight, bottom, bottomLeft, left, topLeft, top
    
    every point := !shape do {
        i := point[1]
        j := point[2]

        topRight := isMember(shape, i - 1, j + 1)
        right := isMember(shape, i, j + 1) 
        bottomRight := isMember(shape, i + 1, j + 1)
        bottom := isMember(shape, i + 1, j)
        bottomLeft := isMember(shape, i + 1, j - 1)
        left := isMember(shape, i, j - 1)
        topLeft := isMember(shape, i - 1, j - 1)
        top := isMember(shape, i - 1, j)

        /top & /right & /bottom & /left & result +:= 4

        \top & /bottom & /left & /right & result +:= 2
        \right & /top & /left & /bottom & result +:= 2
        \left & /top & /right & /bottom & result +:= 2
        \bottom & /top & /right & /left & result +:= 2

        \top & \right & /bottom & /left & result +:= 1
        \top & \left & /bottom & /right & result +:= 1
        \bottom & \left & /top & /right & result +:= 1
        \bottom & \right & /top & /left & result +:= 1
        \right & \bottom & /bottomRight & result +:= 1
        \right & \top & /topRight & result +:= 1
        \left & \top & /topLeft & result +:= 1
        \left & \bottom & /bottomLeft & result +:= 1
    }
    return result
end

procedure isMember(shape, i, j)
    return member(shape, tuple([i, j])) | &null
end
